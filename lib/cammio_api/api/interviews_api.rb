=begin
#Cammio REST API

### Introduction This is the *live* documentation for the Cammio API. You use the API to invite candidates for a video interview. You can also retrieve information on completed video interviews. The API gives access to answer video streams which can be used in a custom video player. You may also request a *video CV* link with the API.  ## Notifications With notifications, ATS partners can be notified in real-time when candidates complete video interviews. Cammio supports both REST and SOAP/WSDL interfaces as call back methods. The parameters used for the callback can be defined by the ATS partner.  Notifications can only be used when invitations have been created with the Cammio API. As part of a candidate invitation, the ATS partner *may* provide **call back parameters** in the invitation message posted to Cammio. Our system stores these variables with the invitation. The variables are looked up when a candidate completes a video interview.  Before notifications can be used, it has to be configured by the Cammio team in the account settings. It is not necessary to use the notification system. ATS partners can also ‘poll’ the Cammio API to look for new values.  ## Authorization Click on the triangle below to see the authorization information. <details>   <summary>Authorization information</summary>    ### Basic Authentication (basicAuth)   Provide the API with your **username** (email address) and **password** for each call you make. Click the green button 'Authorize' to use set your details.    ### HMAC Authentication (bearerAuth)   Using this authentication method, you can login on behalf of a specific user (proxy in).   Generate a request token to get an access token. We use JSON Web Token (JWT) for token handling. There are libraries available for all major server-side programming languages.    You first generate a request token, with the **client_id** and the **client_secret** that have been given to you. You provide the JWT library with your **client_id**  the **email** address of the user and an **expiration timestamp**. You then sign the token with your **client_secret**. The generated token is valid for a limited time (up to 5 minutes), ensuring the security of the endpoint. JWT uses HMAC256 encryption for an even higher level of security.    For each programming language there are JWT libraries available. For more information on JWT, please visit [JWT.io](http://jwt.io/).    #### Generate Request Token   For PHP, we recommend using the PHP-JWT library, which can be found at [https://github.com/firebase/php-jwt](https://github.com/firebase/php-jwt). Below is an example on how to generate a request token:        use \\Firebase\\JWT\\JWT;       $timestamp = gmdate('U');       $claim = array(\"iss\" => \"put-your-client-id-here\", \"email\" => \"put-email-of-user-here\", \"exp\" => $timestamp);       $token = JWT::encode($claim, \"put-your-client-secret-here\");'    For .NET, we recommend using Jwt.Net from [NuGet](https://www.nuget.org/packages/JWT). More info and the download can be found at [https://github.com/jwt-dotnet/jwt](https://github.com/jwt-dotnet/jwt).        var token = new JwtBuilder()         .WithAlgorithm(new HMACSHA256Algorithm())         .WithSecret(\"put-your-client-secret-here\")         .AddClaim(\"exp\", DateTimeOffset.UtcNow.ToUnixTimeSeconds())         .AddClaim(\"email\", \"put-email-of-user-here\")         .AddClaim(\"iss\", \"put-your-client-id-here\")         .Build();    #### Request an Access Token   Once the request token is generated, this can be used to get an access token. This is done by **POSTING** a message the endpoint ***/token*** with the request token in the *ASSERTION* part of the request body. An access token has a set expiration time.    You use the returned **access_token** in the header of each API request. Click the green button 'Authorize' to set the token. </details> 

The version of the OpenAPI document: 2.0.0
Contact: api@cammio.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module CammioAPI
  class InterviewsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes an interview
    # With this resource, you can delete a video interview. Use this resource with caution! 
    # @param interview_id [Integer] Invitation id to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_interview(interview_id, opts = {})
      delete_interview_with_http_info(interview_id, opts)
      nil
    end

    # Deletes an interview
    # With this resource, you can delete a video interview. Use this resource with caution! 
    # @param interview_id [Integer] Invitation id to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_interview_with_http_info(interview_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.delete_interview ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.delete_interview"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#delete_interview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a review for this interview
    # Deletes a review by ID for this interview. Use with caution! 
    # @param interview_id [Integer] ID of the interview
    # @param review_id [Integer] ID of the review
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_interview_review(interview_id, review_id, opts = {})
      delete_interview_review_with_http_info(interview_id, review_id, opts)
      nil
    end

    # Delete a review for this interview
    # Deletes a review by ID for this interview. Use with caution! 
    # @param interview_id [Integer] ID of the interview
    # @param review_id [Integer] ID of the review
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_interview_review_with_http_info(interview_id, review_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.delete_interview_review ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.delete_interview_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling InterviewsApi.delete_interview_review"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/reviews/{reviewId}'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s)).sub('{' + 'reviewId' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#delete_interview_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a reviewer for this interview
    # Deletes a reviewer by ID for this interview. Use with caution! 
    # @param interview_id [Integer] ID of the interview
    # @param reviewer_id [Integer] ID of the reviewer
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_interview_reviewer(interview_id, reviewer_id, opts = {})
      delete_interview_reviewer_with_http_info(interview_id, reviewer_id, opts)
      nil
    end

    # Delete a reviewer for this interview
    # Deletes a reviewer by ID for this interview. Use with caution! 
    # @param interview_id [Integer] ID of the interview
    # @param reviewer_id [Integer] ID of the reviewer
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_interview_reviewer_with_http_info(interview_id, reviewer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.delete_interview_reviewer ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.delete_interview_reviewer"
      end
      # verify the required parameter 'reviewer_id' is set
      if @api_client.config.client_side_validation && reviewer_id.nil?
        fail ArgumentError, "Missing the required parameter 'reviewer_id' when calling InterviewsApi.delete_interview_reviewer"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/reviewers/{reviewerId}'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s)).sub('{' + 'reviewerId' + '}', CGI.escape(reviewer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#delete_interview_reviewer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the big five profile
    # This resource returns the big five personality profile, if available. 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [Profile]
    def get_big_five_profile(interview_id, opts = {})
      data, _status_code, _headers = get_big_five_profile_with_http_info(interview_id, opts)
      data
    end

    # Get the big five profile
    # This resource returns the big five personality profile, if available. 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [Array<(Profile, Integer, Hash)>] Profile data, response status code and response headers
    def get_big_five_profile_with_http_info(interview_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.get_big_five_profile ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.get_big_five_profile"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/profile'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Profile' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#get_big_five_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find interview by ID
    # With this resource, you can get the details of a completed video interview, including access to recorded video streams. 
    # @param interview_id [Integer] ID of interview to return
    # @param [Hash] opts the optional parameters
    # @return [Interview]
    def get_interview_by_id(interview_id, opts = {})
      data, _status_code, _headers = get_interview_by_id_with_http_info(interview_id, opts)
      data
    end

    # Find interview by ID
    # With this resource, you can get the details of a completed video interview, including access to recorded video streams. 
    # @param interview_id [Integer] ID of interview to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Interview, Integer, Hash)>] Interview data, response status code and response headers
    def get_interview_by_id_with_http_info(interview_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.get_interview_by_id ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.get_interview_by_id"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Interview' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#get_interview_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the player embed code
    # Get the player embed code for the interview. This code can be used to add a player to a web page. You will have to add your token manually. 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_interview_embed_code(interview_id, opts = {})
      data, _status_code, _headers = get_interview_embed_code_with_http_info(interview_id, opts)
      data
    end

    # Get the player embed code
    # Get the player embed code for the interview. This code can be used to add a player to a web page. You will have to add your token manually. 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_interview_embed_code_with_http_info(interview_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.get_interview_embed_code ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.get_interview_embed_code"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/embed_code'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#get_interview_embed_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review for this interview
    # Get the details for the selected review. 
    # @param interview_id [Integer] ID of the interview
    # @param review_id [Integer] ID of the review
    # @param [Hash] opts the optional parameters
    # @return [Review]
    def get_interview_review(interview_id, review_id, opts = {})
      data, _status_code, _headers = get_interview_review_with_http_info(interview_id, review_id, opts)
      data
    end

    # Review for this interview
    # Get the details for the selected review. 
    # @param interview_id [Integer] ID of the interview
    # @param review_id [Integer] ID of the review
    # @param [Hash] opts the optional parameters
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def get_interview_review_with_http_info(interview_id, review_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.get_interview_review ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.get_interview_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling InterviewsApi.get_interview_review"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/reviews/{reviewId}'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s)).sub('{' + 'reviewId' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Review' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#get_interview_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reviewer for this interview
    # Returns a reviewer by ID for this interview. 
    # @param interview_id [Integer] ID of the interview
    # @param reviewer_id [Integer] ID of the reviewer
    # @param [Hash] opts the optional parameters
    # @return [Reviewer]
    def get_interview_reviewer(interview_id, reviewer_id, opts = {})
      data, _status_code, _headers = get_interview_reviewer_with_http_info(interview_id, reviewer_id, opts)
      data
    end

    # Reviewer for this interview
    # Returns a reviewer by ID for this interview. 
    # @param interview_id [Integer] ID of the interview
    # @param reviewer_id [Integer] ID of the reviewer
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reviewer, Integer, Hash)>] Reviewer data, response status code and response headers
    def get_interview_reviewer_with_http_info(interview_id, reviewer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.get_interview_reviewer ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.get_interview_reviewer"
      end
      # verify the required parameter 'reviewer_id' is set
      if @api_client.config.client_side_validation && reviewer_id.nil?
        fail ArgumentError, "Missing the required parameter 'reviewer_id' when calling InterviewsApi.get_interview_reviewer"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/reviewers/{reviewerId}'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s)).sub('{' + 'reviewerId' + '}', CGI.escape(reviewer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Reviewer' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#get_interview_reviewer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of reviewers for this interview
    # This resource returns a list of reviewers for this interview. 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [Array<Reviewer>]
    def get_interview_reviewers(interview_id, opts = {})
      data, _status_code, _headers = get_interview_reviewers_with_http_info(interview_id, opts)
      data
    end

    # List of reviewers for this interview
    # This resource returns a list of reviewers for this interview. 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Reviewer>, Integer, Hash)>] Array<Reviewer> data, response status code and response headers
    def get_interview_reviewers_with_http_info(interview_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.get_interview_reviewers ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.get_interview_reviewers"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/reviewers'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Reviewer>' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#get_interview_reviewers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of reviews for the interview
    # Returns a list of reviews for the interview 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [Array<Review>]
    def get_interview_reviews(interview_id, opts = {})
      data, _status_code, _headers = get_interview_reviews_with_http_info(interview_id, opts)
      data
    end

    # List of reviews for the interview
    # Returns a list of reviews for the interview 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Review>, Integer, Hash)>] Array<Review> data, response status code and response headers
    def get_interview_reviews_with_http_info(interview_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.get_interview_reviews ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.get_interview_reviews"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/reviews'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Review>' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#get_interview_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of interviews
    # This resource returns a list of all completed video interviews. All parameters are optional. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :template_id Invitations belonging to template
    # @option opts [String] :first_name Query by first name
    # @option opts [String] :last_name Query by last name
    # @option opts [String] :email Query by email
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @option opts [Integer] :limit The numbers of items to return. (default to 10)
    # @return [Array<InlineResponse2001>]
    def get_interviews(opts = {})
      data, _status_code, _headers = get_interviews_with_http_info(opts)
      data
    end

    # Returns a list of interviews
    # This resource returns a list of all completed video interviews. All parameters are optional. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :template_id Invitations belonging to template
    # @option opts [String] :first_name Query by first name
    # @option opts [String] :last_name Query by last name
    # @option opts [String] :email Query by email
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @option opts [Integer] :limit The numbers of items to return.
    # @return [Array<(Array<InlineResponse2001>, Integer, Hash)>] Array<InlineResponse2001> data, response status code and response headers
    def get_interviews_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.get_interviews ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling InterviewsApi.get_interviews, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 50
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InterviewsApi.get_interviews, must be smaller than or equal to 50.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InterviewsApi.get_interviews, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/interviews'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'template_id'] = opts[:'template_id'] if !opts[:'template_id'].nil?
      query_params[:'first_name'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'last_name'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<InlineResponse2001>' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#get_interviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a video CV link
    # Get a video CV link for a completed interview. This link to the video interview is valid only 3 times and must be consumed within 3 days after which the link expires. 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def get_video_cv_link(interview_id, opts = {})
      data, _status_code, _headers = get_video_cv_link_with_http_info(interview_id, opts)
      data
    end

    # Get a video CV link
    # Get a video CV link for a completed interview. This link to the video interview is valid only 3 times and must be consumed within 3 days after which the link expires. 
    # @param interview_id [Integer] ID of the interview
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_video_cv_link_with_http_info(interview_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.get_video_cv_link ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.get_video_cv_link"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/video_cv'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2002' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#get_video_cv_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a review for the interview
    # Add a review for the interview. A review consists of a rating and remarks. 
    # @param interview_id [Integer] ID of the interview
    # @param body [InlineObject2] 
    # @param [Hash] opts the optional parameters
    # @return [Review]
    def post_interview_review(interview_id, body, opts = {})
      data, _status_code, _headers = post_interview_review_with_http_info(interview_id, body, opts)
      data
    end

    # Add a review for the interview
    # Add a review for the interview. A review consists of a rating and remarks. 
    # @param interview_id [Integer] ID of the interview
    # @param body [InlineObject2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def post_interview_review_with_http_info(interview_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.post_interview_review ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.post_interview_review"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InterviewsApi.post_interview_review"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/reviews'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Review' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#post_interview_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite a reviewer for the interview
    # Invite a reviewer to review the interview. 
    # @param interview_id [Integer] ID of the interview
    # @param body [InlineObject3] 
    # @param [Hash] opts the optional parameters
    # @return [Reviewer]
    def post_interview_reviewer(interview_id, body, opts = {})
      data, _status_code, _headers = post_interview_reviewer_with_http_info(interview_id, body, opts)
      data
    end

    # Invite a reviewer for the interview
    # Invite a reviewer to review the interview. 
    # @param interview_id [Integer] ID of the interview
    # @param body [InlineObject3] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reviewer, Integer, Hash)>] Reviewer data, response status code and response headers
    def post_interview_reviewer_with_http_info(interview_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InterviewsApi.post_interview_reviewer ...'
      end
      # verify the required parameter 'interview_id' is set
      if @api_client.config.client_side_validation && interview_id.nil?
        fail ArgumentError, "Missing the required parameter 'interview_id' when calling InterviewsApi.post_interview_reviewer"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InterviewsApi.post_interview_reviewer"
      end
      # resource path
      local_var_path = '/interviews/{interviewId}/reviewers'.sub('{' + 'interviewId' + '}', CGI.escape(interview_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Reviewer' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth', 'bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InterviewsApi#post_interview_reviewer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
